import scipy.io as sio
import numpy as np
import os
import argparse
from tqdm import tqdm
import argparse
import torch.nn as nn
import torch
# from .misc import img2tensor, scandir
import cv2
from metric import Metric
import os.path as osp
import csv
def scandir(dir_path, suffix=None, recursive=False, full_path=False):
    if (suffix is not None) and not isinstance(suffix, (str, tuple)):
        raise TypeError('"suffix" must be a string or tuple of strings')

    root = dir_path

    def _scandir(dir_path, suffix, recursive):
        for entry in os.scandir(dir_path):
            if not entry.name.startswith('.') and entry.is_file():
                if full_path:
                    return_path = entry.path
                else:
                    return_path = osp.relpath(entry.path, root)

                if suffix is None:
                    yield return_path
                elif return_path.endswith(suffix):
                    yield return_path
            else:
                if recursive:
                    yield from _scandir(entry.path, suffix=suffix, recursive=recursive)
                else:
                    continue

    return _scandir(dir_path, suffix=suffix, recursive=recursive)

def img2tensor(imgs, bgr2rgb=True, float32=True):
    """Numpy array to tensor.

    Args:
        imgs (list[ndarray] | ndarray): Input images.
        bgr2rgb (bool): Whether to change bgr to rgb.
        float32 (bool): Whether to change to float32.

    Returns:
        list[tensor] | tensor: Tensor images. If returned results only have
            one element, just return tensor.
    """

    def _totensor(img, bgr2rgb, float32):
        if img.shape[2] == 3 and bgr2rgb:
            if img.dtype == 'float64':
                img = img.astype('float32')
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img = torch.from_numpy(img.transpose(2, 0, 1))
        if float32:
            img = img.float()
        return img

    if isinstance(imgs, list):
        return [_totensor(img, bgr2rgb, float32) for img in imgs]
    else:
        return _totensor(imgs, bgr2rgb, float32)

if __name__ == '__main__':
    model_dir = '/data/code/llblur/LLBlur_test/results'
    # models = os.listdir(model_dir)
    # models = sorted([model.split('/')[-1] for model in models if 'local' not in model])
    models = ['llbnetv73_local']
    for model in models:
        results_path = os.path.join(model_dir, model)

        parser = argparse.ArgumentParser(
            description='Image motion deblurring evaluation on GoPro/HIDE')
        parser.add_argument('--test_path', type=str, default='/data/datasets/relo/image/test/sharp')
        parser.add_argument('--result_path', type=str, default='/data/code/llblur/LLBlur_test/results')
        parser.add_argument('--model', type=str, default=model,help='options: lednet, lednet_retrain, lednetgan')
        parser.add_argument('--dataset', type=str, default='lol-relo', help='dataset name')
        parser.add_argument('--save_path', default='./metrics.csv',
                            help='Save denoised images in result directory')
        args = parser.parse_args()

        args.result_path = args.result_path + '/' + f'{args.model}'
        # args.result_path = '/data/datasets/relo/test'
        # args.model = 'blur'
        # /data/datasets/relo/image/test/blur
        print('args.result_path:', args.result_path)
        # continue
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        metrics = Metric(device=device)
        img_paths = sorted(list(scandir(args.test_path, suffix=('jpg', 'png'), recursive=True, full_path=True)))
        for img_path in tqdm(img_paths):
            print(f'Processing: {img_path}')
            restore_path = img_path.replace(args.test_path, args.result_path).replace('_sharp', '_blur')
            print(f'Processing: {restore_path}')
            mask_path = img_path.replace('image', 'mask').replace('/sharp', '').replace('_sharp', '')

            img_gt = cv2.imread(img_path, cv2.IMREAD_COLOR)
            img_gt = img2tensor(img_gt / 255., bgr2rgb=True, float32=True).to(device)

            img_r = cv2.imread(restore_path, cv2.IMREAD_COLOR)
            assert img_r is not None, f'Image not found: {restore_path}'
            # h, w = img_r.shape[:2]
            # nw, nh = round(0.5 * w), round(0.5 * h)
            # img_r = cv2.resize(img_r, (nw, nh), interpolation=cv2.INTER_CUBIC)
            img_r = img2tensor(img_r / 255., bgr2rgb=True, float32=True).to(device)

            img_mask = cv2.imread(mask_path, cv2.IMREAD_COLOR)
            h, w = img_mask.shape[:2]
            nw, nh = round(0.5 * w), round(0.5 * h)
            img_mask = cv2.resize(img_mask, (nw, nh), interpolation=cv2.INTER_CUBIC)
            img_mask[img_mask>=0.5] = 1
            img_mask[img_mask<0.5] = 0
            img_mask = img2tensor(img_mask / 255., bgr2rgb=True, float32=True).to(device)
            img_mask = img_mask[1:2,:,:]
            metrics.update(img_gt, img_r, img_mask)

        results = metrics.mean()
        print(results)
        result = [args.model,] + [args.dataset,] + [format(results[key], '.4f') for key in results.keys()]
        with open(args.save_path, "a", newline="") as file:
            writer = csv.writer(file)
            writer.writerow(["model_name"] +['dataset']+ [key for key in results.keys()])
            writer.writerow(result)
